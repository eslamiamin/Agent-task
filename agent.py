# -*- coding: utf-8 -*-
"""Agent.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1F3dgoHaEdY5mRWg0eUo8db3hHKVlEOMX
"""

!pip install langgraph langchain openai

from langgraph.graph import StateGraph, END

from typing import TypedDict, List, Dict

#defining the state
class agentstate(TypedDict):
  today: Dict[str, float]
  yesterday : Dict[str, float]
  profit: float
  cac_change: float
  alerts: list[str]
  recommendation: list[str]

#node
def input_node(state: dict) -> agentstate:
  return {
      'today': state["today"],
      'yesterday': state ["yesterday"],
      'cac_change': 0.0,
      'profit': 0.0,
      'alerts': [],
      'recommendation': []
  }

def processing_node(state: agentstate) -> agentstate:
  today= state['today']
  yesterday= state['yesterday']

  profit= today['revenue'] - today['cost']
  today_cac= today['cost']/ today['customers']
  yesterday_cac= yesterday['cost']/ yesterday['customers']
  cac_change= ((today_cac - yesterday_cac)/ yesterday_cac) * 100

  new_state= state.copy()
  new_state['profit']= profit
  new_state['cac_change']= cac_change
  return new_state

def recommendation_node(state: agentstate) -> agentstate:
  recs=[]
  alerts=[]
  if state['profit']<0:
    recs.append('reduce costs if profit is negative')
  if state['cac_change']>20:
    alerts.append(f"cac increased by {round(state['cac_change'],2)}")
    recs.append('review marketing campaigns if cac has increased dramaticlly')
  if state['today']['revenue'] > state['yesterday']['revenue']:
    recs.append('consider an increase in advertising budget if sales are growing')

  state['alerts']= alerts
  state['recommendation']= recs

  return state

builder= StateGraph(agentstate)
builder.add_node('input', input_node)
builder.add_node('process', processing_node)
builder.add_node('recommend', recommendation_node)
builder.set_entry_point('input')
builder.add_edge('input', 'process')
builder.add_edge('process', 'recommend')
builder.add_edge('recommend', END)

graph= builder.compile()
graph

sample_input= {
    'today': {'revenue':100, 'cost':70, 'customers':40},
    'yesterday': {'revenue':90, 'cost':60, 'customers':60}
}
output = graph.invoke(sample_input)

output

def test_agent():
    sample_input = {
        "today": {"revenue": 100, "cost": 70, "customers": 40},
        "yesterday": {"revenue": 90, "cost": 60, "customers": 60}
    }
    result = graph.invoke(sample_input)

    assert result["profit"] == 30
    assert round(result["cac_change"], 1) == 75.0
    assert "cac increased" in result["alerts"][0]
    assert any("marketing" in r.lower() for r in result["recommendation"])
    assert any("advertising" in r.lower() for r in result["recommendation"])

    return "Test passed!"

print(test_agent())

